% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rnn_estimators.R
\name{dynamic_rnn}
\alias{dynamic_rnn}
\title{Dynamic RNN Estimator}
\usage{
dynamic_rnn(problem_type, prediction_type, sequence_feature_columns,
  context_feature_columns = NULL, num_classes = NULL, num_units = NULL,
  cell_type = "basic_rnn", optimizer = "SGD", learning_rate = 0.1,
  predict_probabilities = F, momentum = NULL, gradient_clipping_norm = 5,
  dropout_keep_probabilities = NULL, feature_engineering_fn = NULL,
  model_dir = NULL, config = NULL)
}
\arguments{
\item{problem_type}{whether the \code{Estimator} is intended for a regression or
classification problem. Value must be one of \code{ProblemType.CLASSIFICATION}
or \code{ProblemType.LINEAR_REGRESSION}.}

\item{prediction_type}{whether the \code{Estimator} should return a value for each
step in the sequence, or just a single value for the final time step. Must
be one of \code{PredictionType.SINGLE_VALUE} or \code{PredictionType.MULTIPLE_VALUE}.}

\item{sequence_feature_columns}{An iterable containing all the feature
columns describing sequence features. All items in the iterable should be
instances of classes derived from \code{FeatureColumn}.}

\item{context_feature_columns}{An iterable containing all the feature columns
describing context features, i.e., features that apply across all time
steps. All items in the set should be instances of classes derived from
\code{FeatureColumn}.}

\item{num_classes}{the number of classes for a classification problem. Only
used when \code{problem_type=ProblemType.CLASSIFICATION}.}

\item{num_units}{A list of integers indicating the number of units in the
\code{RNNCell}s in each layer.}

\item{cell_type}{A subclass of \code{RNNCell} or one of 'basic_rnn,' 'lstm' or
'gru'.}

\item{optimizer}{Either the name of the optimizer to be used when training
the model, or a \code{tf$Optimizer} instance. Defaults to the SGD optimizer.}

\item{learning_rate}{Learning rate. This argument has no effect if
\code{optimizer} is an instance of an \code{Optimizer}.}

\item{predict_probabilities}{A boolean indicating whether to predict
probabilities for all classes. Used only if \code{problem_type} is
\code{ProblemType.CLASSIFICATION}}

\item{momentum}{Momentum value. Only used if \code{optimizer_type} is 'Momentum'.}

\item{gradient_clipping_norm}{Parameter used for gradient clipping. If
\code{NULL}, then no clipping is performed.}

\item{dropout_keep_probabilities}{a list of dropout probabilities or \code{NULL}.
If a list is given, it must have length \code{len(num_units) + 1}. If \code{NULL},
then no dropout is applied.}

\item{feature_engineering_fn}{Takes features and labels which are the output
of \code{input_fn} and returns features and labels which will be fed into
\code{model_fn}. Please check \code{model_fn} for a definition of features and
labels.}

\item{model_dir}{Directory to save the model parameters, graph, and so on.
This can also be used to load checkpoints from the directory into a
estimator to continue training a previously saved model.}

\item{config}{A run configuration created by run_config(), used to configure the runtime
settings.}
}
\description{
Dynamic RNN Estimator
}
\seealso{
Other canned estimators: \code{\link{dnn_estimators}},
  \code{\link{dnn_linear_combined_estimators}},
  \code{\link{linear_classifier}},
  \code{\link{linear_regressor}}
}
