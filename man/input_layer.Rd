% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/feature_columns.R
\name{input_layer}
\alias{input_layer}
\title{Construct an Input Layer}
\usage{
input_layer(features, feature_columns, weight_collections = NULL,
  trainable = TRUE)
}
\arguments{
\item{features}{A mapping from key to tensors. \code{_FeatureColumn}s look up via
these keys. For example \code{numeric_column('price')} will look at 'price' key
in this dict. Values can be a \code{SparseTensor} or a \code{Tensor} depends on
corresponding \code{_FeatureColumn}.}

\item{feature_columns}{An iterable containing the FeatureColumns to use as
inputs to your model. All items should be instances of classes derived from
\code{_DenseColumn} such as \code{numeric_column}, \code{embedding_column},
\code{bucketized_column}, \code{indicator_column}. If you have categorical features,
you can wrap them with an \code{embedding_column} or \code{indicator_column}.}

\item{weight_collections}{A list of collection names to which the Variable
will be added. Note that, variables will also be added to collections
\code{tf.GraphKeys.GLOBAL_VARIABLES} and \code{ops.GraphKeys.MODEL_VARIABLES}.}

\item{trainable}{If \code{TRUE} also add the variable to the graph collection
\code{GraphKeys.TRAINABLE_VARIABLES} (see \code{tf.Variable}).}
}
\value{
A \code{Tensor} which represents input layer of a model. Its shape is
(batch_size, first_layer_dimension) and its dtype is \code{float32}.
first_layer_dimension is determined based on given \code{feature_columns}.
}
\description{
Returns a dense \code{Tensor} as input layer based on given \code{feature_columns}.
At the first layer of the model, this column oriented data should be converted
to a single \code{Tensor}.
}
\section{Raises}{
 ValueError: if an item in \code{feature_columns} is not a
dense column.
}

\examples{

\dontrun{
#' price <- column_numeric('price')
keywords_embedded <- column_embedding(categorical_column_with_hash_bucket("keywords", 1000), dimensions = 16)
columns <- c(price, keywords_embedded, ...)
features <- tf$parse_example(..., features = make_parse_example_spec(columns))
dense_tensor <- input_layer(features, columns)
prediction <- tf$layers$dense(dense_tensor, 1)
}
}
\seealso{
Other feature column constructors: \code{\link{column_bucketized}},
  \code{\link{column_categorical_weighted}},
  \code{\link{column_categorical_with_hash_bucket}},
  \code{\link{column_categorical_with_identity}},
  \code{\link{column_categorical_with_vocabulary_file}},
  \code{\link{column_categorical_with_vocabulary_list}},
  \code{\link{column_crossed}},
  \code{\link{column_embedding}},
  \code{\link{column_numeric}}
}
