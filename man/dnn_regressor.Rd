% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dnn_estimators.R
\name{dnn_regressor}
\alias{dnn_regressor}
\title{A Regressor for TensorFlow DNN Models}
\usage{
dnn_regressor(hidden_units, feature_columns, model_dir = NULL,
  label_dimension = 1L, weight_column = NULL, optimizer = "Adagrad",
  activation_fn = tf$nn$relu, dropout = NULL,
  input_layer_partitioner = NULL, config = NULL)
}
\arguments{
\item{hidden_units}{An integer vector, indicating the number of hidden
units in each layer. All layers are fully connected. For example,
\code{c(64, 32)} means the first layer has 64 nodes, and the second layer
has 32 nodes.}

\item{feature_columns}{An \R list containing all of the feature columns used
by the model.}

\item{model_dir}{Directory to save model parameters, graph and etc. This can
also be used to load checkpoints from the directory into a estimator to
continue training a previously saved model.}

\item{label_dimension}{Number of regression targets per example. This is the
size of the last dimension of the labels and logits \code{Tensor} objects
(typically, these have shape \code{[batch_size, label_dimension]}).}

\item{weight_column}{A string or a \code{_NumericColumn} created by
\code{\link[=column_numeric]{column_numeric()}} defining feature column representing weights. It is used
to down weight or boost examples during training. It will be multiplied by
the loss of the example. If it is a string, it is used as a key to fetch
weight tensor from the \code{features}. If it is a \code{_NumericColumn}, raw tensor
is fetched by key \code{weight_column.key}, then \code{weight_column.normalizer_fn} is
applied on it to get weight tensor.}

\item{optimizer}{Either the name of the optimizer to be used when training the model,
or a \code{tf.Optimizer} instance. Defaults to the Adagrad optimizer.}

\item{activation_fn}{The activation function to apply to each layer. Defaults
to the \strong{re}ctified \strong{l}inear \strong{u}nit activation function (\code{tf$nn$relu}).}

\item{dropout}{When not \code{NULL}, the probability we will drop out a given
coordinate.}

\item{input_layer_partitioner}{Optional. Partitioner for input layer.
Defaults to \code{min_max_variable_partitioner} with \code{min_slice_size} 64 << 20.}

\item{config}{\code{RunConfig} object to configure the runtime settings.}
}
\description{
Initializes a TensorFlow deep neural network regressor.
}
\seealso{
Other canned estimators: \code{\link{dnn_classifier}},
  \code{\link{dnn_linear_combined_classifier}},
  \code{\link{dnn_linear_combined_regressor}},
  \code{\link{dynamic_rnn}},
  \code{\link{linear_classifier}},
  \code{\link{linear_regressor}},
  \code{\link{state_saving_rnn}}
}
